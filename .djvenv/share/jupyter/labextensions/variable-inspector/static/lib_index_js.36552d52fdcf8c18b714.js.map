{"version":3,"file":"lib_index_js.36552d52fdcf8c18b714.js","mappings":"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","sources":["webpack://variable-inspector/./src/components/paginationControls.tsx","webpack://variable-inspector/./src/components/searchBar.tsx","webpack://variable-inspector/./src/components/variableInspectorPanel.ts","webpack://variable-inspector/./src/components/variableInspectorSidebar.tsx","webpack://variable-inspector/./src/components/variableItem.tsx","webpack://variable-inspector/./src/components/variableList.tsx","webpack://variable-inspector/./src/components/variableListComponent.tsx","webpack://variable-inspector/./src/components/variablePanel.tsx","webpack://variable-inspector/./src/components/variablePanelWidget.tsx","webpack://variable-inspector/./src/components/variableRefreshButton.tsx","webpack://variable-inspector/./src/components/variableSettingsButton.tsx","webpack://variable-inspector/./src/context/codeExecutionContext.tsx","webpack://variable-inspector/./src/context/notebookKernelContext.tsx","webpack://variable-inspector/./src/context/notebookPanelContext.tsx","webpack://variable-inspector/./src/context/notebookVariableContext.tsx","webpack://variable-inspector/./src/context/pluginVisibilityContext.tsx","webpack://variable-inspector/./src/context/themeContext.tsx","webpack://variable-inspector/./src/context/variableRefershContext.tsx","webpack://variable-inspector/./src/icons/checkIcon.ts","webpack://variable-inspector/./src/icons/detailIcon.ts","webpack://variable-inspector/./src/icons/panelIcon.ts","webpack://variable-inspector/./src/icons/pluginIcon.ts","webpack://variable-inspector/./src/icons/refreshIcon.ts","webpack://variable-inspector/./src/icons/settingsIcon.ts","webpack://variable-inspector/./src/icons/skipLeftIcon.ts","webpack://variable-inspector/./src/icons/skipRightIcon.ts","webpack://variable-inspector/./src/icons/smallSkipLeftIcon.ts","webpack://variable-inspector/./src/icons/smallSkipRightIcon.ts","webpack://variable-inspector/./src/index.ts","webpack://variable-inspector/./src/python_code/getMatrix.ts","webpack://variable-inspector/./src/python_code/getVariables.ts","webpack://variable-inspector/./src/utils/allowedTypes.ts","webpack://variable-inspector/./src/utils/executeGetMatrix.ts","webpack://variable-inspector/./src/utils/kernelOperationNotifier.ts","webpack://variable-inspector/./src/utils/utils.ts","webpack://variable-inspector/./src/watchers/notebookWatcher.ts"],"sourcesContent":["import React from 'react';\nimport { skipLeftIcon } from '../icons/skipLeftIcon';\nimport { smallSkipLeftIcon } from '../icons/smallSkipLeftIcon';\nimport { smallSkipRightIcon } from '../icons/smallSkipRightIcon';\nimport { skipRightIcon } from '../icons/skipRightIcon';\n// import { gridScanIcon } from '../icons/gridScanIcon';\n\ninterface PaginationControlsProps {\n  rowsCount: number;\n  colsCount: number;\n  rowInput: string;\n  setRowInput: (value: string) => void;\n  currentRow: number;\n  setCurrentRow: (value: number) => void;\n  columnInput: string;\n  setColumnInput: (value: string) => void;\n  currentColumn: number;\n  setCurrentColumn: (value: number) => void;\n  cellRowInput: string;\n  setCellRowInput: (value: string) => void;\n  cellColumnInput: string;\n  setCellColumnInput: (value: string) => void;\n  handleGotoCell: () => void;\n  handlePrevRowPage: (value: string) => void;\n  handleNextRowPage: (value: string) => void;\n  handlePrevColumnPage: (value: string) => void;\n  handleNextColumnPage: (value: string) => void;\n}\n\nexport const PaginationControls: React.FC<PaginationControlsProps> = ({\n  rowsCount,\n  colsCount,\n  rowInput,\n  setRowInput,\n  currentRow,\n  setCurrentRow,\n  columnInput,\n  setColumnInput,\n  currentColumn,\n  setCurrentColumn,\n  cellRowInput,\n  setCellRowInput,\n  cellColumnInput,\n  setCellColumnInput,\n  handleGotoCell,\n  handlePrevRowPage,\n  handleNextRowPage,\n  handlePrevColumnPage,\n  handleNextColumnPage\n}) => {\n  return (\n    <div className=\"mljar-variable-inspector-pagination-container\">\n      <div className=\"mljar-variable-inspector-pagination-item\">\n        <div className=\"mljar-variable-inspector-choose-range\">\n          <span>Rows from </span>\n          <button\n            onClick={e => handlePrevRowPage('first')}\n            className=\"mljar-variable-inspector-skip-button\"\n            title={'Display first 100 rows'}\n          >\n            <skipLeftIcon.react className=\"mljar-variable-inspector-skip-icon\" />\n          </button>\n          <button\n            onClick={e => handlePrevRowPage('previous')}\n            className=\"mljar-variable-inspector-skip-button\"\n            title={'Display previous 100 rows'}\n          >\n            <smallSkipLeftIcon.react className=\"mljar-variable-inspector-skip-icon\" />\n          </button>\n          <input\n            title={'Start with row'}\n            type=\"number\"\n            min={0}\n            max={rowsCount - 1}\n            value={rowInput === '' ? (rowInput = '0') : rowInput}\n            className=\"mljar-variable-inspector-pagination-input\"\n            onChange={e => setRowInput(e.target.value)}\n            onKeyDown={e => {\n              if (e.key === 'Enter') {\n                const newPage = parseInt(rowInput, 10);\n                if (!isNaN(newPage) && newPage >= 0 && newPage <= rowsCount) {\n                  setCurrentRow(newPage);\n                  setRowInput(newPage.toString());\n                }\n              }\n            }}\n            onBlur={() => {\n              const newPage = parseInt(rowInput, 10);\n              if (isNaN(newPage) || newPage < 0 || newPage > rowsCount) {\n                setRowInput(currentRow.toString());\n              } else {\n                setCurrentRow(newPage);\n              }\n            }}\n          />\n          <span>to </span>\n          <span>\n            {parseInt(rowInput) + 99 >= rowsCount\n              ? rowsCount - 1\n              : parseInt(rowInput) + 99}\n          </span>\n          <button\n            onClick={e => handleNextRowPage('next')}\n            className=\"mljar-variable-inspector-skip-button\"\n            title={'Display next 100 rows'}\n          >\n            <smallSkipRightIcon.react className=\"mljar-variable-inspector-skip-icon\" />\n          </button>\n          <button\n            onClick={e => handleNextRowPage('last')}\n            className=\"mljar-variable-inspector-skip-button\"\n            title={'Display last 100 rows'}\n          >\n            <skipRightIcon.react className=\"mljar-variable-inspector-skip-icon\" />\n          </button>\n          <span>\n            Total <span style={{ fontWeight: 600 }}>{rowsCount}</span> rows\n          </span>\n        </div>\n        <div className=\"mljar-variable-inspector-choose-range\">\n          <span>Columns from </span>\n          <button\n            onClick={e => handlePrevColumnPage('first')}\n            className=\"mljar-variable-inspector-skip-button\"\n            title={'Display first 50 columns'}\n          >\n            <skipLeftIcon.react className=\"mljar-variable-inspector-skip-icon\" />\n          </button>\n          <button\n            onClick={e => handlePrevColumnPage('previous')}\n            className=\"mljar-variable-inspector-skip-button\"\n            title={'Display previous 50 columns'}\n          >\n            <smallSkipLeftIcon.react className=\"mljar-variable-inspector-skip-icon\" />\n          </button>\n          <input\n            title={'Start with column'}\n            type=\"number\"\n            min={0}\n            max={colsCount - 1}\n            value={columnInput === '' ? (columnInput = '0') : columnInput}\n            className=\"mljar-variable-inspector-pagination-input\"\n            onChange={e => setColumnInput(e.target.value)}\n            onKeyDown={e => {\n              if (e.key === 'Enter') {\n                const newPage = parseInt(columnInput, 10);\n                if (!isNaN(newPage) && newPage >= 0 && newPage <= colsCount) {\n                  setCurrentColumn(newPage);\n                  setColumnInput(newPage.toString());\n                }\n              }\n            }}\n            onBlur={() => {\n              const newPage = parseInt(columnInput, 10);\n              if (isNaN(newPage) || newPage < 0 || newPage > colsCount) {\n                setColumnInput(currentColumn.toString());\n              } else {\n                setCurrentColumn(newPage);\n              }\n            }}\n          />\n          <span>to </span>\n          <span>\n            {parseInt(columnInput) + 49 >= colsCount\n              ? colsCount - 1\n              : parseInt(columnInput) + 49}\n          </span>\n          <button\n            onClick={e => handleNextColumnPage('next')}\n            className=\"mljar-variable-inspector-skip-button\"\n            title={'Display next 50 columns'}\n          >\n            <smallSkipRightIcon.react className=\"mljar-variable-inspector-skip-icon\" />\n          </button>\n          <button\n            onClick={e => handleNextColumnPage('last')}\n            className=\"mljar-variable-inspector-skip-button\"\n            title={'Display last 50 columns'}\n          >\n            <skipRightIcon.react className=\"mljar-variable-inspector-skip-icon\" />\n          </button>\n          <span>\n            Total <span style={{ fontWeight: 600 }}>{colsCount}</span> columns\n          </span>\n        </div>\n        {/* Goto Cell section */}\n        {/* <div className=\"mljar-variable-inspector-choose-range\">\n          <span>Goto cell: </span>\n          <input\n            type=\"number\"\n            placeholder=\"Row\"\n            value={cellRowInput}\n            className=\"mljar-variable-inspector-pagination-input\"\n            onChange={e => setCellRowInput(e.target.value)}\n            onKeyDown={e => {\n              if (e.key === 'Enter') {\n                const newVal = parseInt(cellRowInput, 10);\n                if (isNaN(newVal) || newVal < 0) {\n                  setCellRowInput('0');\n                } else {\n                  handleGotoCell();\n                }\n              }\n            }}\n            onBlur={() => {\n              const newVal = parseInt(cellRowInput, 10);\n              if (isNaN(newVal) || newVal < 0) {\n                setCellRowInput('0');\n              }\n            }}\n          />\n          <input\n            type=\"number\"\n            placeholder=\"Column\"\n            value={cellColumnInput}\n            className=\"mljar-variable-inspector-pagination-input\"\n            onChange={e => setCellColumnInput(e.target.value)}\n            onKeyDown={e => {\n              if (e.key === 'Enter') {\n                const newVal = parseInt(cellColumnInput, 10);\n                if (isNaN(newVal) || newVal < 0) {\n                  setCellColumnInput('0');\n                } else {\n                  handleGotoCell();\n                }\n              }\n            }}\n            onBlur={() => {\n              const newVal = parseInt(cellColumnInput, 10);\n              if (isNaN(newVal) || newVal < 0) {\n                setCellColumnInput('0');\n              }\n            }}\n          />\n          <button\n            onClick={handleGotoCell}\n            className=\"mljar-variable-inspector-skip-button\"\n          >\n            <gridScanIcon.react className=\"mljar-variable-inspector-skip-icon\" />\n          </button>\n        </div> */}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useVariableContext } from '../context/notebookVariableContext';\n\nexport const SearchBar: React.FC = () => {\n  const { variables, searchTerm, setSearchTerm } = useVariableContext();\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n  };\n  return (\n    <>\n      {variables.length !== 0 ? (\n        <div className=\"mljar-variable-search-bar-container\">\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={handleChange}\n            placeholder=\"Search Variable...\"\n            className=\"mljar-variable-inspector-search-bar-input\"\n          />\n        </div>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n","import { ILabShell } from '@jupyterlab/application';\nimport { VariablePanelWidget } from './variablePanelWidget';\nimport { panelIcon } from '../icons/panelIcon';\nimport { NotebookPanel } from '@jupyterlab/notebook';\n\nexport function createEmptyVariableInspectorPanel(\n  labShell: ILabShell,\n  variableName: string,\n  variableType: string,\n  variableShape: string,\n  notebookPanel?: NotebookPanel | null\n): void {\n  const panel = new VariablePanelWidget({\n    variableName,\n    variableType,\n    variableShape,\n    notebookPanel\n  });\n\n  panel.id = `${variableType}-${variableName}`;\n  panel.title.label = `${variableType} ${variableName}`;\n  panel.title.closable = true;\n  panel.title.icon = panelIcon;\n\n  const existingPanel = Array.from(labShell.widgets('main')).find(\n    widget => widget.id === panel.id\n  );\n\n  if (existingPanel) {\n    labShell.add(panel, 'main', { mode: 'tab-after', ref: existingPanel.id });\n  } else {\n    labShell.add(panel, 'main', { mode: 'split-right' });\n  }\n\n  labShell.activateById(panel.id);\n}\n","// src/components/variableInspectorSidebarWidget.tsx\nimport React from 'react';\nimport { ReactWidget } from '@jupyterlab/ui-components';\nimport { Message } from '@lumino/messaging';\nimport { pluginIcon } from '../icons/pluginIcon';\nimport { NotebookWatcher } from '../watchers/notebookWatcher';\nimport { CommandRegistry } from '@lumino/commands';\nimport { IStateDB } from '@jupyterlab/statedb';\n\nimport { NotebookPanelContextProvider } from '../context/notebookPanelContext';\nimport { NotebookKernelContextProvider } from '../context/notebookKernelContext';\nimport { VariableContextProvider } from '../context/notebookVariableContext';\nimport { VariableListComponent } from './variableListComponent';\nimport {\n  PluginVisibilityContextValue,\n  PluginVisibilityContext\n} from '../context/pluginVisibilityContext';\nimport { ILabShell } from '@jupyterlab/application';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { CodeExecutionContextProvider } from '../context/codeExecutionContext';\n\nexport class VariableInspectorSidebarWidget extends ReactWidget {\n  private notebookWatcher: NotebookWatcher;\n  private commands: CommandRegistry;\n  private isOpen = false;\n  private labShell: ILabShell;\n  private settingRegistry: ISettingRegistry | null = null;\n  private _stateDB: IStateDB;\n\n  constructor(\n    notebookWatcher: NotebookWatcher,\n    commands: CommandRegistry,\n    labShell: ILabShell,\n    settingRegistry: ISettingRegistry | null,\n    stateDB: IStateDB\n  ) {\n    super();\n    this.notebookWatcher = notebookWatcher;\n    this.commands = commands;\n    this.id = 'mljar-variable-inspector::mljar-left-sidebar';\n    this.title.icon = pluginIcon;\n    this.title.caption = 'Variable Inspector';\n    this.addClass('mljar-variable-inspector-sidebar-widget');\n    this.labShell = labShell;\n    this.settingRegistry = settingRegistry;\n    this._stateDB = stateDB;\n  }\n\n  protected onAfterShow(msg: Message): void {\n    super.onAfterShow(msg);\n    this.isOpen = true;\n    this.update();\n  }\n\n  protected onAfterHide(msg: Message): void {\n    super.onAfterHide(msg);\n    this.isOpen = false;\n    this.update();\n  }\n\n  render(): JSX.Element {\n    const contextValue: PluginVisibilityContextValue = {\n      isPluginOpen: this.isOpen,\n      setPluginOpen: open => {\n        this.isOpen = open;\n        this.update();\n      }\n    };\n\n    return (\n      <div className=\"mljar-variable-inspector-sidebar-container\">\n        <PluginVisibilityContext.Provider value={contextValue}>\n          <NotebookPanelContextProvider notebookWatcher={this.notebookWatcher}>\n            <NotebookKernelContextProvider\n              notebookWatcher={this.notebookWatcher}\n            >\n              <VariableContextProvider stateDB={this._stateDB}>\n                <CodeExecutionContextProvider\n                  settingRegistry={this.settingRegistry}\n                >\n                  <VariableListComponent\n                    commands={this.commands}\n                    labShell={this.labShell}\n                    settingRegistry={this.settingRegistry}\n                  />\n                </CodeExecutionContextProvider>\n              </VariableContextProvider>\n            </NotebookKernelContextProvider>\n          </NotebookPanelContextProvider>\n        </PluginVisibilityContext.Provider>\n      </div>\n    );\n  }\n}\n\nexport function createVariableInspectorSidebar(\n  notebookWatcher: NotebookWatcher,\n  commands: CommandRegistry,\n  labShell: ILabShell,\n  settingRegistry: ISettingRegistry | null,\n  stateDB: IStateDB\n): VariableInspectorSidebarWidget {\n  return new VariableInspectorSidebarWidget(\n    notebookWatcher,\n    commands,\n    labShell,\n    settingRegistry,\n    stateDB\n  );\n}\n","import React, { useState } from 'react';\nimport { detailIcon } from '../icons/detailIcon';\nimport { CommandRegistry } from '@lumino/commands';\nimport { executeMatrixContent } from '../utils/executeGetMatrix';\nimport { useNotebookPanelContext } from '../context/notebookPanelContext';\nimport { allowedTypes } from '../utils/allowedTypes';\nimport { ILabShell } from '@jupyterlab/application';\nimport { createEmptyVariableInspectorPanel } from '../components/variableInspectorPanel';\n\ninterface VariableInfo {\n  name: string;\n  type: string;\n  shape: string;\n  dimension: number;\n  size: number;\n  value: string;\n}\n\ninterface VariableItemProps {\n  vrb: VariableInfo;\n  commands: CommandRegistry;\n  labShell: ILabShell;\n  showType: boolean;\n  showShape: boolean;\n  showSize: boolean;\n}\n\nexport const VariableItem: React.FC<VariableItemProps> = ({\n  vrb,\n  commands,\n  labShell,\n  showType,\n  showShape,\n  showSize\n}) => {\n  const notebookPanel = useNotebookPanelContext();\n  const [loading, setLoading] = useState(false);\n\n  const handleButtonClick = async (\n    variableName: string,\n    variableType: string,\n    variableShape: string\n  ) => {\n    if (notebookPanel) {\n      try {\n        const result = await executeMatrixContent(\n          variableName,\n          0,\n          100,\n          0,\n          100,\n          notebookPanel\n        );\n        const variableData = result.content;\n        let isOpen = false;\n        for (const widget of labShell.widgets('main')) {\n          if (widget.id === `${variableType}-${variableName}`) {\n            isOpen = true;\n          }\n        }\n        if (variableData && !isOpen) {\n          setLoading(true);\n          createEmptyVariableInspectorPanel(\n            labShell,\n            variableName,\n            variableType,\n            variableShape,\n            notebookPanel\n          );\n        }\n      } catch (err) {\n        console.error('unknown error', err);\n      } finally {\n        setLoading(false);\n      }\n    }\n  };\n\n  return (\n    <li\n      className={`mljar-variable-inspector-item ${allowedTypes.includes(vrb.type) && vrb.dimension <= 2 && vrb.type !== 'list' && vrb.dimension !== 1 ? '' : 'small-value'}`}\n    >\n      <span className=\"mljar-variable-inspector-variable-name\">{vrb.name}</span>\n      {showType && <span className=\"mljar-variable-type\">{vrb.type}</span>}\n      {showShape && (\n        <span className=\"mljar-variable-shape\">\n          {vrb.shape !== 'None' ? vrb.shape : ''}\n        </span>\n      )}\n      {showSize && (\n        <span className=\"mljar-variable-inspector-variable-size\">\n          {vrb.size}\n        </span>\n      )}\n      {allowedTypes.includes(vrb.type) && vrb.dimension <= 2 ? (\n        vrb.dimension === 1 && vrb.type === 'list' ? (\n          <button\n            className=\"mljar-variable-inspector-variable-preview\"\n            title={vrb.value}\n            onClick={() => handleButtonClick(vrb.name, vrb.type, vrb.shape)}\n          >\n            {vrb.value}\n          </button>\n        ) : (\n          <button\n            className=\"mljar-variable-inspector-show-variable-button\"\n            onClick={() => handleButtonClick(vrb.name, vrb.type, vrb.shape)}\n            aria-label={`Show details for ${vrb.name}`}\n            title=\"Show value\"\n          >\n            {loading ? (\n              <div className=\"mljar-variable-spinner-big\" />\n            ) : (\n              <detailIcon.react className=\"mljar-variable-detail-button-icon\" />\n            )}\n          </button>\n        )\n      ) : vrb.type === 'dict' ? (\n        <span\n          className=\"mljar-variable-inspector-variable-value\"\n          title={vrb.value}\n        >\n          {vrb.value}\n        </span>\n      ) : (\n        <span\n          className=\"mljar-variable-inspector-variable-value\"\n          title={vrb.value}\n        >\n          {vrb.value}\n        </span>\n      )}\n    </li>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useVariableContext } from '../context/notebookVariableContext';\nimport { VariableItem } from './variableItem';\nimport { CommandRegistry } from '@lumino/commands';\nimport { ILabShell } from '@jupyterlab/application';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport {\n  VARIABLE_INSPECTOR_ID,\n  showTypeProperty,\n  showShapeProperty,\n  showSizeProperty\n} from '../index';\n\ninterface VariableListProps {\n  commands: CommandRegistry;\n  labShell: ILabShell;\n  settingRegistry: ISettingRegistry | null;\n}\n\nexport const VariableList: React.FC<VariableListProps> = ({\n  commands,\n  labShell,\n  settingRegistry\n}) => {\n  const { variables, searchTerm, loading } = useVariableContext();\n\n  const filteredVariables = variables.filter(variable =>\n    variable.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  const [showType, setShowType] = useState(false);\n  const [showShape, setShowShape] = useState(false);\n  const [showSize, setShowSize] = useState(false);\n\n  const loadPropertiesValues = () => {\n    if (settingRegistry) {\n      settingRegistry\n        .load(VARIABLE_INSPECTOR_ID)\n        .then(settings => {\n          const updateSettings = (): void => {\n            const loadShowType = settings.get(showTypeProperty)\n              .composite as boolean;\n            setShowType(loadShowType);\n            const loadShowShape = settings.get(showShapeProperty)\n              .composite as boolean;\n            setShowShape(loadShowShape);\n            const loadShowSize = settings.get(showSizeProperty)\n              .composite as boolean;\n            setShowSize(loadShowSize);\n          };\n          updateSettings();\n          settings.changed.connect(updateSettings);\n        })\n        .catch(reason => {\n          console.error(\n            'Failed to load settings for Variable Inspector',\n            reason\n          );\n        });\n    }\n  };\n\n  useEffect(() => {\n    loadPropertiesValues();\n  }, []);\n\n  return (\n    <div className=\"mljar-variable-inspector-list-container\">\n      {loading ? (\n        <div className=\"mljar-variable-inspector-message\">\n          Loading variables...\n        </div>\n      ) : variables.length === 0 ? (\n        <div className=\"mljar-variable-inspector-message\">\n          Sorry, no variables available.\n        </div>\n      ) : (\n        <ul className=\"mljar-variable-inspector-list\">\n          <li className=\"mljar-variable-inspector-header-list\">\n            <span>Name</span>\n            {showType && <span>Type</span>}\n            {showShape && <span>Shape</span>}\n            {showSize && <span>Size</span>}\n            <span>Value</span>\n          </li>\n          {filteredVariables.map((variable, index) => (\n            <VariableItem\n              key={index}\n              vrb={{\n                name: variable.name,\n                type: variable.type,\n                shape: variable.shape,\n                dimension: variable.dimension,\n                size: variable.size,\n                value: variable.value\n              }}\n              commands={commands}\n              labShell={labShell}\n              showType={showType}\n              showShape={showShape}\n              showSize={showSize}\n            />\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport { VariableList } from './variableList';\nimport { SearchBar } from './searchBar';\nimport { RefreshButton } from './variableRefreshButton';\nimport { CommandRegistry } from '@lumino/commands';\nimport { ILabShell } from '@jupyterlab/application';\nimport { SettingsButton } from './variableSettingsButton';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\ninterface IVariableListComponentProps {\n  commands: CommandRegistry;\n  labShell: ILabShell;\n  settingRegistry: ISettingRegistry | null;\n}\n\nexport const VariableListComponent: React.FC<IVariableListComponentProps> = ({\n  commands,\n  labShell,\n  settingRegistry\n}) => {\n  return (\n    <div className=\"mljar-variable-inspector-container\">\n      <div className=\"mljar-variable-header-container\">\n        <h3 className=\"mljar-variable-header\">Variable Inspector</h3>\n        <RefreshButton settingRegistry={settingRegistry} />\n        <SettingsButton settingRegistry={settingRegistry} />\n      </div>\n      <div>\n        <SearchBar />\n        <VariableList\n          commands={commands}\n          labShell={labShell}\n          settingRegistry={settingRegistry}\n        />\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport {\n  MultiGrid as RVMultiGrid,\n  AutoSizer as RVAutoSizer\n} from 'react-virtualized';\nimport 'react-virtualized/styles.css';\nimport { allowedTypes } from '../utils/allowedTypes';\nimport { NotebookPanel } from '@jupyterlab/notebook';\nimport { executeMatrixContent } from '../utils/executeGetMatrix';\nimport { useVariableRefeshContext } from '../context/variableRefershContext';\nimport { withIgnoredPanelKernelUpdates } from '../utils/kernelOperationNotifier';\nimport { useThemeContext } from '../context/themeContext';\nimport { transformMatrixData } from '../utils/utils';\nimport { PaginationControls } from './paginationControls';\n\ninterface IVariablePanelProps {\n  variableName: string;\n  initVariableType: string;\n  initVariableShape: string;\n  notebookPanel?: NotebookPanel | null;\n}\n\nconst AutoSizer = RVAutoSizer as unknown as React.ComponentType<any>;\nconst MultiGrid = RVMultiGrid as unknown as React.ComponentType<any>;\n\nexport const VariablePanel: React.FC<IVariablePanelProps> = ({\n  variableName,\n  initVariableType,\n  initVariableShape,\n  notebookPanel\n}) => {\n  const [variableShape, setVariableShape] = useState(initVariableShape);\n  const [variableType, setVariableType] = useState(initVariableType);\n  const { isDark } = useThemeContext();\n  const maxRowsRange = 100;\n  const maxColsRange = 50;\n  const [matrixData, setMatrixData] = useState<any[][]>([]);\n  const { refreshCount } = useVariableRefeshContext();\n  const [currentRow, setCurrentRow] = useState(0);\n  const [currentColumn, setCurrentColumn] = useState(0);\n  const [returnedSize, setReturnedSize] = useState<any[]>([]);\n  const [rowInput, setRowInput] = useState(currentRow.toString());\n  const [columnInput, setColumnInput] = useState(currentColumn.toString());\n  const [rowsCount, setRowsCount] = useState(parseDimensions(variableShape)[0]);\n  const [colsCount, setColsCount] = useState(parseDimensions(variableShape)[1]);\n  const [autoSizerKey, setAutoSizerKey] = useState(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [cellRowInput, setCellRowInput] = useState('');\n  const [cellColumnInput, setCellColumnInput] = useState('');\n  const [gotoCell, setGotoCell] = useState<{\n    row: number;\n    column: number;\n  } | null>(null);\n  const [highlightCell, setHighlightCell] = useState<{\n    row: number;\n    column: number;\n  } | null>(null);\n\n  const fetchMatrixData = useCallback(async () => {\n    try {\n      if (!notebookPanel) {\n        return;\n      }\n\n      const result = await withIgnoredPanelKernelUpdates(() =>\n        executeMatrixContent(\n          variableName,\n          currentColumn,\n          currentColumn + maxColsRange > colsCount\n            ? colsCount\n            : currentColumn + maxColsRange,\n          currentRow,\n          currentRow + maxRowsRange > rowsCount\n            ? rowsCount\n            : currentRow + maxRowsRange,\n\n          notebookPanel\n        )\n      );\n      setVariableShape(result.variableShape);\n      setVariableType(result.variableType);\n      setReturnedSize(result.returnedSize);\n      setMatrixData(result.content);\n    } catch (error) {\n      console.error('Error fetching matrix content:', error);\n    }\n  }, [\n    notebookPanel,\n    variableName,\n    currentColumn,\n    currentRow,\n    maxColsRange,\n    maxRowsRange,\n    withIgnoredPanelKernelUpdates,\n    executeMatrixContent,\n    setVariableShape,\n    setVariableType,\n    setReturnedSize,\n    setMatrixData,\n    variableType,\n    returnedSize\n  ]);\n\n  useEffect(() => {\n    setRowInput(currentRow.toString());\n  }, [currentRow]);\n\n  useEffect(() => {\n    setColumnInput(currentColumn.toString());\n  }, [currentColumn]);\n\n  useEffect(() => {\n    fetchMatrixData();\n    const [rows, cols] = parseDimensions(variableShape);\n    setRowsCount(rows);\n    setColsCount(cols);\n  }, [refreshCount]);\n\n  useEffect(() => {\n    fetchMatrixData();\n  }, [currentRow, currentColumn]);\n\n  useEffect(() => {\n    if (containerRef.current) {\n      const resizeObserver = new ResizeObserver(entries => {\n        for (const entry of entries) {\n          void entry;\n          setAutoSizerKey(prev => prev + 1);\n        }\n      });\n      resizeObserver.observe(containerRef.current);\n      return () => {\n        resizeObserver.disconnect();\n      };\n    }\n  }, []);\n\n  const handlePrevRowPage = (value: string) => {\n    if (value === 'previous') {\n      if (currentRow > maxRowsRange - 1) {\n        setCurrentRow(currentRow - maxRowsRange);\n      } else {\n        setCurrentRow(0);\n      }\n    }\n    if (value === 'first') {\n      setCurrentRow(0);\n    }\n  };\n\n  const handleNextRowPage = (value: string) => {\n    if (rowsCount > maxRowsRange) {\n      if (value === 'next') {\n        if (currentRow + 2 * maxRowsRange < rowsCount) {\n          setCurrentRow(currentRow + maxRowsRange);\n        } else {\n          setCurrentRow(rowsCount - maxRowsRange);\n        }\n      }\n      if (value === 'last') {\n        setCurrentRow(rowsCount - maxRowsRange);\n      }\n    } else {\n      setCurrentRow(0);\n    }\n  };\n\n  const handlePrevColumnPage = (value: string) => {\n    if (value === 'previous') {\n      if (currentColumn > maxColsRange - 1) {\n        setCurrentColumn(currentColumn - maxColsRange);\n      } else {\n        setCurrentColumn(0);\n      }\n    }\n    if (value === 'first') {\n      setCurrentColumn(0);\n    }\n  };\n\n  const handleNextColumnPage = (value: string) => {\n    if (colsCount > maxColsRange) {\n      if (value === 'next') {\n        if (currentColumn + 2 * maxColsRange < colsCount) {\n          setCurrentColumn(currentColumn + maxColsRange);\n        } else {\n          setCurrentColumn(colsCount - maxColsRange);\n        }\n      }\n      if (value === 'last') {\n        setCurrentColumn(colsCount - maxColsRange);\n      }\n    } else {\n      setCurrentColumn(0);\n    }\n  };\n\n  function parseDimensions(input: string): [number, number] {\n    const regex2D = /^(-?\\d+)\\s*x\\s*(-?\\d+)$/;\n    const match2D = input.match(regex2D);\n    if (match2D) {\n      const a = parseInt(match2D[1], 10);\n      const b = parseInt(match2D[2], 10);\n      return [a, b];\n    }\n    const regex1D = /^-?\\d+$/;\n    if (input.match(regex1D)) {\n      const n = parseInt(input, 10);\n      return [n, 1];\n    }\n    throw new Error('Wrong format');\n  }\n\n  const { data, fixedRowCount, fixedColumnCount } = transformMatrixData(\n    matrixData,\n    variableType,\n    currentRow,\n    currentColumn\n  );\n\n  const rowCount = data.length;\n  const colCount = data[0]?.length || 0;\n\n  const columnWidths: number[] = [];\n  for (let col = 0; col < colCount; col++) {\n    let maxLength = 0;\n    for (let row = 0; row < rowCount; row++) {\n      const cell = data[row][col];\n      const cellStr = cell !== null ? cell.toString() : '';\n      if (cellStr.length > maxLength) {\n        maxLength = cellStr.length;\n      }\n    }\n    columnWidths[col] = maxLength * 7 + 16;\n  }\n\n  const cellRenderer = ({\n    columnIndex,\n    key,\n    rowIndex,\n    style\n  }: {\n    columnIndex: number;\n    key: string;\n    rowIndex: number;\n    style: React.CSSProperties;\n  }) => {\n    const cellData = data[rowIndex][columnIndex];\n    let cellStyle: React.CSSProperties = {\n      ...style,\n      boxSizing: 'border-box',\n      border: `1px solid ${isDark ? '#444' : '#ddd'}`,\n      fontSize: '0.75rem',\n      padding: '2px',\n      color: isDark ? '#ddd' : '#000',\n      background: isDark\n        ? rowIndex % 2 === 0\n          ? '#333'\n          : '#222'\n        : rowIndex % 2 === 0\n          ? '#fafafa'\n          : '#fff'\n    };\n\n    if (\n      highlightCell &&\n      rowIndex === highlightCell.row &&\n      columnIndex === highlightCell.column\n    ) {\n      cellStyle = {\n        ...cellStyle,\n        border: '2px solid #0099cc'\n      };\n    }\n\n    if (rowIndex === 0 || columnIndex === 0) {\n      cellStyle = {\n        ...cellStyle,\n        background: isDark ? '#555' : '#e0e0e0',\n        fontWeight: 'bold',\n        textAlign: 'center'\n      };\n    }\n\n    return (\n      <div key={key} style={cellStyle}>\n        {typeof cellData === 'boolean'\n          ? cellData\n            ? 'True'\n            : 'False'\n          : cellData}\n      </div>\n    );\n  };\n\n  const handleGotoCell = () => {\n    const targetGlobalRow = parseInt(cellRowInput, 10);\n    const targetGlobalCol = parseInt(cellColumnInput, 10);\n    if (\n      !isNaN(targetGlobalRow) &&\n      targetGlobalRow >= 0 &&\n      !isNaN(targetGlobalCol) &&\n      targetGlobalCol >= 0\n    ) {\n      const newRowPage = Math.floor(targetGlobalRow / maxRowsRange) + 1;\n      const newColPage = Math.floor(targetGlobalCol / maxColsRange) + 1;\n      setRowInput(newRowPage.toString());\n      setColumnInput(newColPage.toString());\n      const localRow = targetGlobalRow - (newRowPage - 1) * maxRowsRange;\n      const localCol = targetGlobalCol - (newColPage - 1) * maxColsRange;\n      const gridRow = fixedRowCount + localRow;\n      const gridCol = fixedColumnCount + localCol;\n      setCurrentRow(newRowPage);\n      setCurrentColumn(newColPage);\n      setTimeout(() => {\n        setGotoCell({ row: gridRow, column: gridCol });\n        setHighlightCell({ row: gridRow, column: gridCol });\n        setTimeout(() => {\n          setHighlightCell(null);\n        }, 2000);\n      }, 500);\n    }\n  };\n\n  if (!allowedTypes.includes(variableType)) {\n    return (\n      <div\n        style={{\n          padding: '10px',\n          fontSize: '16px',\n          height: '100%',\n          background: isDark ? '#222' : '#fff',\n          color: isDark ? '#ddd' : '#000'\n        }}\n      >\n        <p>Wrong variable type: {variableType}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"mljar-variable-inspector-pagination-container\"\n      style={{\n        height: '100%',\n        background: isDark ? '#222' : '#fff',\n        color: isDark ? '#ddd' : '#000'\n      }}\n    >\n      <div style={{ height: '90%' }}>\n        {/* Grid */}\n        <AutoSizer key={autoSizerKey}>\n          {({ width, height }: { width: number; height: number }) => (\n            <MultiGrid\n              fixedRowCount={fixedRowCount}\n              fixedColumnCount={fixedColumnCount}\n              cellRenderer={cellRenderer}\n              columnCount={colCount}\n              columnWidth={({ index }: { index: number }) =>\n                columnWidths[index]\n              }\n              rowHeight={20}\n              height={height}\n              rowCount={rowCount}\n              width={width}\n              scrollToRow={gotoCell ? gotoCell.row : undefined}\n              scrollToColumn={gotoCell ? gotoCell.column : undefined}\n              styleTopLeftGrid={{ background: isDark ? '#555' : '#e0e0e0' }}\n              styleTopRightGrid={{ background: isDark ? '#555' : '#e0e0e0' }}\n              styleBottomLeftGrid={{ background: isDark ? '#222' : '#fff' }}\n              styleBottomRightGrid={{ background: isDark ? '#222' : '#fff' }}\n            />\n          )}\n        </AutoSizer>\n      </div>\n      <div>\n        {/* pagination */}\n        <PaginationControls\n          rowsCount={rowsCount}\n          colsCount={colsCount}\n          rowInput={rowInput}\n          setRowInput={setRowInput}\n          currentRow={currentRow}\n          setCurrentRow={setCurrentRow}\n          columnInput={columnInput}\n          setColumnInput={setColumnInput}\n          currentColumn={currentColumn}\n          setCurrentColumn={setCurrentColumn}\n          cellRowInput={cellRowInput}\n          setCellRowInput={setCellRowInput}\n          cellColumnInput={cellColumnInput}\n          setCellColumnInput={setCellColumnInput}\n          handleGotoCell={handleGotoCell}\n          handlePrevRowPage={handlePrevRowPage}\n          handleNextRowPage={handleNextRowPage}\n          handlePrevColumnPage={handlePrevColumnPage}\n          handleNextColumnPage={handleNextColumnPage}\n        />\n      </div>\n    </div>\n  );\n};\n","import { ReactWidget } from '@jupyterlab/apputils';\nimport React from 'react';\nimport { VariablePanel } from './variablePanel';\nimport { NotebookPanel } from '@jupyterlab/notebook';\nimport { VariableRefreshContextProvider } from '../context/variableRefershContext';\nimport { ThemeContextProvider } from '../context/themeContext';\n\nexport interface VariablePanelWidgetProps {\n  variableName: string;\n  variableType: string;\n  variableShape: string;\n  notebookPanel?: NotebookPanel | null;\n}\n\nexport class VariablePanelWidget extends ReactWidget {\n  constructor(private props: VariablePanelWidgetProps) {\n    super();\n    this.update();\n  }\n\n  protected render(): JSX.Element {\n    return (\n      <div style={{ height: '100%', width: '100%' }}>\n        <VariableRefreshContextProvider\n          notebookPanel={this.props.notebookPanel}\n        >\n        <ThemeContextProvider>\n          <VariablePanel\n            variableName={this.props.variableName}\n            initVariableType={this.props.variableType}\n            initVariableShape={this.props.variableShape}\n            notebookPanel={this.props.notebookPanel}\n          />\n          </ThemeContextProvider>\n        </VariableRefreshContextProvider>\n      </div>\n    );\n  }\n}\n","import { refreshIcon } from '../icons/refreshIcon';\nimport React, { useEffect, useState } from 'react';\nimport { useVariableContext } from '../context/notebookVariableContext';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { VARIABLE_INSPECTOR_ID, autoRefreshProperty } from '../index';\n\ninterface IProps {\n  settingRegistry: ISettingRegistry | null;\n}\n\nexport const RefreshButton: React.FC<IProps> = ({ settingRegistry }) => {\n  const { refreshVariables, loading } = useVariableContext();\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  const loadAutoRefresh = () => {\n    if (settingRegistry) {\n      settingRegistry\n        .load(VARIABLE_INSPECTOR_ID)\n        .then(settings => {\n          const updateSettings = (): void => {\n            const loadAutoRefresh = settings.get(autoRefreshProperty)\n              .composite as boolean;\n            setAutoRefresh(loadAutoRefresh);\n          };\n          updateSettings();\n          settings.changed.connect(updateSettings);\n        })\n        .catch(reason => {\n          console.error(\n            'Failed to load settings for Variable Inspector',\n            reason\n          );\n        });\n    }\n  };\n\n  useEffect(() => {\n    loadAutoRefresh();\n  }, []);\n\n  return (\n    <button\n      className={`mljar-variable-inspector-refresh-button ${autoRefresh ? `` : `manually-refresh`}`}\n      onClick={refreshVariables}\n      disabled={loading}\n      title=\"Refresh Variables\"\n    >\n      <refreshIcon.react className=\"mljar-variable-inspector-refresh-icon\" />\n    </button>\n  );\n};\n","import { settingsIcon } from '../icons/settingsIcon';\nimport { checkIcon } from '../icons/checkIcon';\nimport React, { useEffect, useState } from 'react';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n\nimport {\n  VARIABLE_INSPECTOR_ID,\n  autoRefreshProperty,\n  showTypeProperty,\n  showShapeProperty,\n  showSizeProperty\n} from '../index';\n\ninterface ISettingsButtonProps {\n  settingRegistry: ISettingRegistry | null;\n}\n\nexport const SettingsButton: React.FC<ISettingsButtonProps> = ({\n  settingRegistry\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n  const [showType, setShowType] = useState(false);\n  const [showShape, setShowShape] = useState(false);\n  const [showSize, setShowSize] = useState(false);\n\n  const showSettings = () => {\n    setIsOpen(!isOpen);\n  };\n\n  const savePropertyValue = (propertyName: string, newValue: boolean) => {\n    if (settingRegistry) {\n      settingRegistry\n        .load(VARIABLE_INSPECTOR_ID)\n        .then(settings => {\n          settings.set(propertyName, newValue);\n        })\n        .catch(reason => {\n          console.error(`Faild to save ${propertyName}: `, reason);\n        });\n    }\n  };\n\n  const loadPropertiesValues = () => {\n    if (settingRegistry) {\n      settingRegistry\n        .load(VARIABLE_INSPECTOR_ID)\n        .then(settings => {\n          const updateSettings = (): void => {\n            const loadAutoRefresh = settings.get(autoRefreshProperty)\n              .composite as boolean;\n            setAutoRefresh(loadAutoRefresh);\n\n            const loadShowType = settings.get(showTypeProperty)\n              .composite as boolean;\n            setShowType(loadShowType);\n\n            const loadShowShape = settings.get(showShapeProperty)\n              .composite as boolean;\n            setShowShape(loadShowShape);\n\n            const loadShowSize = settings.get(showSizeProperty)\n              .composite as boolean;\n            setShowSize(loadShowSize);\n          };\n          updateSettings();\n          settings.changed.connect(updateSettings);\n        })\n        .catch(reason => {\n          console.error(\n            'Failed to load settings for Variable Inspector',\n            reason\n          );\n        });\n    }\n  };\n\n  useEffect(() => {\n    loadPropertiesValues();\n  }, []);\n\n  return (\n    <div className=\"mljar-variable-inspector-settings-container\">\n      <button\n        className={`mljar-variable-inspector-settings-button ${isOpen ? 'active' : ''}`}\n        onClick={showSettings}\n        title=\"Settings\"\n      >\n        <settingsIcon.react className=\"mljar-variable-inspector-settings-icon\" />\n      </button>\n\n      {isOpen && (\n        <div className=\"mljar-variable-inspector-settings-menu\">\n          <ul className=\"mljar-variable-inspector-settings-menu-list\">\n            <button\n              className=\"mljar-variable-inspector-settings-menu-item first\"\n              onClick={() => {\n                if (!autoRefresh) savePropertyValue(autoRefreshProperty, true);\n              }}\n            >\n              Automatically refresh\n              {autoRefresh && (\n                <checkIcon.react className=\"mljar-variable-inspector-settings-icon\" />\n              )}\n            </button>\n            <button\n              className=\"mljar-variable-inspector-settings-menu-item\"\n              onClick={() => {\n                if (autoRefresh) savePropertyValue(autoRefreshProperty, false);\n              }}\n            >\n              Manually refresh\n              {!autoRefresh && (\n                <checkIcon.react className=\"mljar-variable-inspector-settings-icon\" />\n              )}\n            </button>\n            <hr />\n            <button\n              className=\"mljar-variable-inspector-settings-menu-item\"\n              onClick={() => savePropertyValue(showTypeProperty, !showType)}\n            >\n              Show type\n              {showType && (\n                <checkIcon.react className=\"mljar-variable-inspector-settings-icon\" />\n              )}\n            </button>\n            <button\n              className=\"mljar-variable-inspector-settings-menu-item\"\n              onClick={() => savePropertyValue(showShapeProperty, !showShape)}\n            >\n              Show shape\n              {showShape && (\n                <checkIcon.react className=\"mljar-variable-inspector-settings-icon\" />\n              )}\n            </button>\n            <button\n              className=\"mljar-variable-inspector-settings-menu-item last\"\n              onClick={() => savePropertyValue(showSizeProperty, !showSize)}\n            >\n              Show size\n              {showSize && (\n                <checkIcon.react className=\"mljar-variable-inspector-settings-icon\" />\n              )}\n            </button>\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n  ReactNode\n} from 'react';\nimport { KernelMessage } from '@jupyterlab/services';\nimport { IExecuteInputMsg } from '@jupyterlab/services/lib/kernel/messages';\nimport { useNotebookPanelContext } from './notebookPanelContext';\nimport { useNotebookKernelContext } from './notebookKernelContext';\nimport { useVariableContext } from './notebookVariableContext';\nimport { VARIABLE_INSPECTOR_ID, autoRefreshProperty } from '../index';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { variableDict } from '../python_code/getVariables';\n\ninterface ICodeExecutionContext {}\n\ninterface ICodeExecutionContextProviderProps {\n  children: ReactNode;\n  settingRegistry: ISettingRegistry | null;\n}\n\nconst CodeExecutionContext = createContext<ICodeExecutionContext | undefined>(\n  undefined\n);\n\nexport const CodeExecutionContextProvider: React.FC<\n  ICodeExecutionContextProviderProps\n> = ({ children, settingRegistry }) => {\n  const notebook = useNotebookPanelContext();\n  const kernelReady = useNotebookKernelContext();\n  const { refreshVariables } = useVariableContext();\n  const getVariableCode = variableDict;\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  const loadAutoRefresh = () => {\n    if (settingRegistry) {\n      settingRegistry\n        .load(VARIABLE_INSPECTOR_ID)\n        .then(settings => {\n          const updateSettings = (): void => {\n            const loadAutoRefresh = settings.get(autoRefreshProperty)\n              .composite as boolean;\n            setAutoRefresh(loadAutoRefresh);\n          };\n          updateSettings();\n          settings.changed.connect(updateSettings);\n        })\n        .catch(reason => {\n          console.error(\n            'Failed to load settings for Variable Inspector',\n            reason\n          );\n        });\n    }\n  };\n\n  useEffect(() => {\n    loadAutoRefresh();\n  }, []);\n\n  useEffect(() => {\n    if (!notebook) {\n      return;\n    }\n    const kernel = notebook.sessionContext?.session?.kernel;\n    if (!kernel) {\n      return;\n    }\n    const handleIOPubMessage = (sender: any, msg: KernelMessage.IMessage) => {\n      if (msg.header.msg_type === 'execute_input') {\n        const inputMsg = msg as IExecuteInputMsg;\n        const code = inputMsg.content.code;\n        const variableInspectorPrefix = '_jupyterlab_variableinspector';\n        const mljarPrefix = '__mljar';\n        if (\n          code !== getVariableCode &&\n          !code.includes(variableInspectorPrefix) &&\n          !code.includes(mljarPrefix) &&\n          autoRefresh\n        ) {\n          refreshVariables();\n        }\n      }\n    };\n    kernel.iopubMessage.connect(handleIOPubMessage);\n\n    return () => {\n      kernel.iopubMessage.disconnect(handleIOPubMessage);\n    };\n  }, [notebook, notebook?.sessionContext, kernelReady, autoRefresh]);\n\n  return (\n    <CodeExecutionContext.Provider value={{}}>\n      {children}\n    </CodeExecutionContext.Provider>\n  );\n};\n\nexport const useCodeExecutionContext = (): ICodeExecutionContext => {\n  const context = useContext(CodeExecutionContext);\n  if (!context) {\n    throw new Error(\n      'useCodeExecutionContext must be used CodeExecutionContextProvider'\n    );\n  }\n  return context;\n};\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { NotebookWatcher, KernelInfo } from '../watchers/notebookWatcher';\n\ntype NotebookKernelContextType = KernelInfo | null;\n\nconst NotebookKernelContext = createContext<NotebookKernelContextType>(null);\n\nexport function useNotebookKernelContext(): NotebookKernelContextType {\n  return useContext(NotebookKernelContext);\n}\n\ntype NotebookKernelContextProviderProps = {\n  children: React.ReactNode;\n  notebookWatcher: NotebookWatcher;\n};\n\nexport function NotebookKernelContextProvider({\n  children,\n  notebookWatcher\n}: NotebookKernelContextProviderProps) {\n  const [kernelInfo, setKernelInfo] = useState<KernelInfo | null>(\n    notebookWatcher.kernelInfo\n  );\n\n  useEffect(() => {\n    const onKernelChanged = (\n      sender: NotebookWatcher,\n      newKernelInfo: KernelInfo | null\n    ) => {\n      setKernelInfo(newKernelInfo);\n    };\n\n    notebookWatcher.kernelChanged.connect(onKernelChanged);\n\n    setKernelInfo(notebookWatcher.kernelInfo);\n\n    return () => {\n      notebookWatcher.kernelChanged.disconnect(onKernelChanged);\n    };\n  }, [notebookWatcher]);\n\n  return (\n    <NotebookKernelContext.Provider value={kernelInfo}>\n      {children}\n    </NotebookKernelContext.Provider>\n  );\n}\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { NotebookPanel } from '@jupyterlab/notebook';\nimport { NotebookWatcher } from '../watchers/notebookWatcher';\n\ntype NotebookPanelContextType = NotebookPanel | null;\n\nconst NotebookPanelContext = createContext<NotebookPanelContextType>(null);\n\nexport function useNotebookPanelContext(): NotebookPanelContextType {\n  return useContext(NotebookPanelContext);\n}\n\ntype NotebookPanelContextProviderProps = {\n  children: React.ReactNode;\n  notebookWatcher: NotebookWatcher;\n};\n\nexport function NotebookPanelContextProvider({\n  children,\n  notebookWatcher\n}: NotebookPanelContextProviderProps) {\n  const [notebookPanel, setNotebookPanel] = useState<NotebookPanel | null>(\n    notebookWatcher.notebookPanel()\n  );\n\n  useEffect(() => {\n    const onNotebookPanelChange = (\n      sender: NotebookWatcher,\n      newNotebookPanel: NotebookPanel | null\n    ) => {\n      setNotebookPanel(newNotebookPanel);\n    };\n\n    notebookWatcher.notebookPanelChanged.connect(onNotebookPanelChange);\n\n    setNotebookPanel(notebookWatcher.notebookPanel());\n\n    return () => {\n      notebookWatcher.notebookPanelChanged.disconnect(onNotebookPanelChange);\n    };\n  }, [notebookWatcher]);\n\n  return (\n    <NotebookPanelContext.Provider value={notebookPanel}>\n      {children}\n    </NotebookPanelContext.Provider>\n  );\n}\n","import React, {\n  createContext,\n  useContext,\n  useState,\n  useEffect,\n  useCallback\n} from 'react';\nimport { useNotebookPanelContext } from './notebookPanelContext';\nimport { useNotebookKernelContext } from './notebookKernelContext';\nimport { KernelMessage } from '@jupyterlab/services';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { withIgnoredSidebarKernelUpdates } from '../utils/kernelOperationNotifier';\nimport { variableDict } from '../python_code/getVariables';\n\nexport interface IVariableInfo {\n  name: string;\n  type: string;\n  shape: string;\n  dimension: number;\n  size: number;\n  value: string;\n}\n\ninterface IVariableContextProps {\n  variables: IVariableInfo[];\n  loading: boolean;\n  error: string | null;\n  searchTerm: string;\n  setSearchTerm: React.Dispatch<React.SetStateAction<string>>;\n  refreshVariables: () => void;\n  isRefreshing: boolean;\n  refreshCount: number;\n}\n\nconst VariableContext = createContext<IVariableContextProps | undefined>(\n  undefined\n);\n\ntype Task = () => Promise<void> | void;\n\nclass DebouncedTaskQueue {\n  // Holds the timer handle.\n  private timer: ReturnType<typeof setTimeout> | null = null;\n  // Holds the most recently added task.\n  private lastTask: Task | null = null;\n  private delay: number;\n\n  /**\n   * @param delay Time in milliseconds to wait before executing the last task.\n   */\n  constructor(delay: number = 500) {\n    this.delay = delay;\n  }\n\n  /**\n   * Adds a new task to the queue. Only the last task added within the delay period will be executed.\n   * @param task A function representing the task.\n   */\n  add(task: Task): void {\n    // Save (or overwrite) the latest task.\n    this.lastTask = task;\n\n    // If there’s already a pending timer, clear it.\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Start (or restart) the timer.\n    this.timer = setTimeout(async () => {\n      if (this.lastTask) {\n        try {\n          // Execute the latest task.\n          await this.lastTask();\n        } catch (error) {\n          console.error('Task execution failed:', error);\n        }\n      }\n      // After execution, clear the stored task and timer.\n      this.lastTask = null;\n      this.timer = null;\n    }, this.delay);\n  }\n}\n\nexport const VariableContextProvider: React.FC<{\n  children: React.ReactNode;\n  stateDB: IStateDB;\n}> = ({ children, stateDB }) => {\n  const notebookPanel = useNotebookPanelContext();\n  const kernel = useNotebookKernelContext();\n  const [variables, setVariables] = useState<IVariableInfo[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [isRefreshing, setIsRefreshing] = useState<boolean>(false);\n  const [refreshCount, setRefreshCount] = useState<number>(0);\n  const queue = new DebouncedTaskQueue(250);\n\n  const executeCode = useCallback(async () => {\n    await withIgnoredSidebarKernelUpdates(async () => {\n      //setIsRefreshing(true);\n      //setLoading(true);\n      setError(null);\n\n      if (!notebookPanel) {\n        setVariables([]);\n        setLoading(false);\n        setIsRefreshing(false);\n        return;\n      }\n      //setVariables([]);\n\n      try {\n        const future =\n          notebookPanel.sessionContext?.session?.kernel?.requestExecute({\n            code: variableDict,\n            store_history: false\n          });\n        if (future) {\n          future.onIOPub = (msg: KernelMessage.IIOPubMessage) => {\n            const msgType = msg.header.msg_type;\n            if (\n              msgType === 'execute_result' ||\n              msgType === 'display_data' ||\n              msgType === 'update_display_data' ||\n              msgType === 'error'\n            ) {\n              const content = msg.content as any;\n              const jsonData = content.data['application/json'];\n              const textData = content.data['text/plain'];\n              if (jsonData) {\n                setLoading(false);\n                setIsRefreshing(false);\n                setRefreshCount(prev => prev + 1);\n              } else if (textData) {\n                try {\n                  const cleanedData = textData.replace(/^['\"]|['\"]$/g, '');\n                  const doubleQuotedData = cleanedData.replace(/'/g, '\"');\n                  const parsedData: IVariableInfo[] =\n                    JSON.parse(doubleQuotedData);\n                  if (Array.isArray(parsedData)) {\n                    const mappedVariables: IVariableInfo[] = parsedData.map(\n                      (item: any) => ({\n                        name: item.varName,\n                        type: item.varType,\n                        shape: item.varShape || 'None',\n                        dimension: item.varDimension,\n                        size: item.varSize,\n                        value: item.varSimpleValue\n                      })\n                    );\n                    setVariables(mappedVariables);\n                  } else {\n                    throw new Error('Error during parsing.');\n                  }\n                  setLoading(false);\n                  setIsRefreshing(false);\n                  setRefreshCount(prev => prev + 1);\n                } catch (err) {\n                  setError('Error during export JSON.');\n                  setVariables([]);\n                  setLoading(false);\n                  setIsRefreshing(false);\n                }\n              }\n            }\n          };\n        }\n      } catch (err) {\n        setError('Unexpected error.');\n        setLoading(false);\n        setIsRefreshing(false);\n      }\n    });\n    return;\n  }, [notebookPanel, kernel]);\n\n  useEffect(() => {\n    executeCode();\n  }, [executeCode]);\n\n  return (\n    <VariableContext.Provider\n      value={{\n        variables,\n        loading,\n        error,\n        searchTerm,\n        setSearchTerm,\n        refreshVariables: () => queue.add(() => executeCode()),\n        isRefreshing,\n        refreshCount\n      }}\n    >\n      {children}\n    </VariableContext.Provider>\n  );\n};\n\nexport const useVariableContext = (): IVariableContextProps => {\n  const context = useContext(VariableContext);\n  if (context === undefined) {\n    throw new Error(\n      'useVariableContext must be used within a VariableProvider'\n    );\n  }\n  return context;\n};\n","import React, { createContext, useState, useContext } from 'react';\n\nexport interface PluginVisibilityContextValue {\n  isPluginOpen: boolean;\n  setPluginOpen: (open: boolean) => void;\n}\n\nexport const PluginVisibilityContext =\n  createContext<PluginVisibilityContextValue>({\n    isPluginOpen: false,\n    setPluginOpen: () => { }\n  });\n\nexport function PluginVisibilityProvider({\n  children\n}: {\n  children: React.ReactNode;\n}) {\n  const [isPluginOpen, setPluginOpen] = useState(false);\n  return (\n    <PluginVisibilityContext.Provider value={{ isPluginOpen, setPluginOpen }}>\n      {children}\n    </PluginVisibilityContext.Provider>\n  );\n}\n\nexport function usePluginVisibility() {\n  return useContext(PluginVisibilityContext);\n}\n","import React, { createContext, useEffect, useState, useContext } from 'react';\n\ninterface ThemeContextProps {\n  isDark: boolean;\n}\n\nconst ThemeContext = createContext<ThemeContextProps>({ isDark: false });\n\n  export const ThemeContextProvider: React.FC<{children: React.ReactNode}> = ( {children} ) => {\n  const [isDark, setIsDark] = useState(() => {\n    const theme = document.body.dataset.jpThemeName;\n    return theme ? theme.includes('Dark') : false;\n  });\n\n  useEffect(() => {\n    const observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        if (mutation.type === 'attributes' && mutation.attributeName === 'data-jp-theme-name') {\n          const theme = document.body.getAttribute('data-jp-theme-name');\n          setIsDark(theme?.includes('Dark') ?? false);\n        }\n      });\n    });\n    observer.observe(document.body, {\n      attributes: true,\n      attributeFilter: ['data-jp-theme-name']\n    });\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return (\n    <ThemeContext.Provider value={{ isDark }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useThemeContext = () => useContext(ThemeContext);\n","import { NotebookPanel } from '@jupyterlab/notebook';\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { kernelOperationNotifier } from '../utils/kernelOperationNotifier';\n\ninterface VariableRefreshContextValue {\n  refreshCount: number;\n}\n\nconst VariableRefreshContext = createContext<VariableRefreshContextValue>({\n  refreshCount: 0\n});\n\ninterface VariableRefreshContextProviderProps {\n  children: React.ReactNode;\n  notebookPanel?: NotebookPanel | null;\n}\n\nexport const VariableRefreshContextProvider: React.FC<\n  VariableRefreshContextProviderProps\n> = ({ children, notebookPanel }) => {\n  const [refreshCount, setRefreshCount] = useState<number>(0);\n\n  useEffect(() => {\n    if (!notebookPanel) {\n      return;\n    }\n\n    const kernel = notebookPanel.sessionContext.session?.kernel;\n    if (!kernel) {\n      return;\n    }\n\n    const onSidebarStatusChange = (_sender: any, inProgress: boolean) => {\n      if (inProgress === true) {\n        setRefreshCount(prev => prev + 1);\n      }\n    };\n\n    kernelOperationNotifier.sidebarOperationChanged.connect(\n      onSidebarStatusChange\n    );\n\n    return () => {\n      kernelOperationNotifier.sidebarOperationChanged.disconnect(\n        onSidebarStatusChange\n      );\n    };\n  }, [notebookPanel]);\n\n  return (\n    <VariableRefreshContext.Provider value={{ refreshCount }}>\n      {children}\n    </VariableRefreshContext.Provider>\n  );\n};\n\nexport const useVariableRefeshContext = () =>\n  useContext(VariableRefreshContext);\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nconst svgStr = `\n<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-check\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M5 12l5 5l10 -10\" /></svg>\n`;\n\nexport const checkIcon = new LabIcon({\n  name: 'my-variable-check-icon',\n  svgstr: svgStr\n});\n\n\n\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nconst svgStr = `\n<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-matrix\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M8 16h.013\" /><path d=\"M12.01 16h.005\" /><path d=\"M16.015 16h.005\" /><path d=\"M16.015 12h.005\" /><path d=\"M8.01 12h.005\" /><path d=\"M12.01 12h.005\" /><path d=\"M16.02 8h.005\" /><path d=\"M8.015 8h.005\" /><path d=\"M12.015 8h.005\" /><path d=\"M7 4h-1a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h1\" /><path d=\"M17 4h1a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-1\" /></svg>\n`;\n\nexport const detailIcon = new LabIcon({\n  name: 'detail-plugin-icon',\n  svgstr: svgStr,\n});\n\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nconst svgStr = `\n<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-table-export\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12.5 21h-7.5a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v7.5\" /><path d=\"M3 10h18\" /><path d=\"M10 3v18\" /><path d=\"M16 19h6\" /><path d=\"M19 16l3 3l-3 3\" /></svg>\n`;\n\nexport const panelIcon = new LabIcon({\n  name: 'inspector-panel-icon',\n  svgstr: svgStr,\n});\n\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nconst svgStr = `\n<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-variable\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M5 4c-2.5 5 -2.5 10 0 16m14 -16c2.5 5 2.5 10 0 16m-10 -11h1c1 0 1 1 2.016 3.527c.984 2.473 .984 3.473 1.984 3.473h1\" /><path d=\"M8 16c1.5 0 3 -2 4 -3.5s2.5 -3.5 4 -3.5\" /></svg>\n`;\n\nexport const pluginIcon = new LabIcon({\n  name: 'variable-plugin-icon',\n  svgstr: svgStr,\n});\n\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nconst svgStr = `\n<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-refresh\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4\" /><path d=\"M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4\" /></svg>\n`;\n\nexport const refreshIcon = new LabIcon({\n  name: 'my-variable-refresh-icon',\n  svgstr: svgStr\n});\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nconst svgStr = `\n<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-settings\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z\" /><path d=\"M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0\" /></svg>\n`;\n\nexport const settingsIcon = new LabIcon({\n  name: 'my-variable-settings-icon',\n  svgstr: svgStr\n});\n\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nconst svgStr = `\n<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-chevrons-left\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M11 7l-5 5l5 5\" /><path d=\"M17 7l-5 5l5 5\" /></svg>\n`;\n\nexport const skipLeftIcon = new LabIcon({\n  name: 'my-variable-skip-left-icon',\n  svgstr: svgStr\n});\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nconst svgStr = `\n<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-chevrons-right\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M7 7l5 5l-5 5\" /><path d=\"M13 7l5 5l-5 5\" /></svg>\n`;\n\nexport const skipRightIcon = new LabIcon({\n  name: 'my-variable-skip-right-icon',\n  svgstr: svgStr\n});\n\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nconst svgStr = `\n<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-chevron-left\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M15 6l-6 6l6 6\" /></svg>`;\n\nexport const smallSkipLeftIcon = new LabIcon({\n  name: 'mljar-variable-inspector-small-skip-left-icon',\n  svgstr: svgStr\n});\n","import { LabIcon } from '@jupyterlab/ui-components';\n\nconst svgStr = `\n<svg  xmlns=\"http://www.w3.org/2000/svg\"  width=\"24\"  height=\"24\"  viewBox=\"0 0 24 24\"  fill=\"none\"  stroke=\"currentColor\"  stroke-width=\"2\"  stroke-linecap=\"round\"  stroke-linejoin=\"round\"  class=\"icon icon-tabler icons-tabler-outline icon-tabler-chevron-right\"><path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M9 6l6 6l-6 6\" /></svg>`\nexport const smallSkipRightIcon = new LabIcon({\n  name: 'mljar-variable-inspector-small-skip-right-icon',\n  svgstr: svgStr\n});\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  ILabShell\n} from '@jupyterlab/application';\n\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { IStateDB } from '@jupyterlab/statedb';\n\nimport { createVariableInspectorSidebar } from './components/variableInspectorSidebar';\nimport { NotebookWatcher } from './watchers/notebookWatcher';\n\nexport const VARIABLE_INSPECTOR_ID = 'variable-inspector:plugin';\nexport const autoRefreshProperty = 'variableInspectorAutoRefresh';\nexport const showTypeProperty = 'variableInspectorShowType';\nexport const showShapeProperty = 'variableInspectorShowShape';\nexport const showSizeProperty = 'variableInspectorShowSize';\n\nconst leftTab: JupyterFrontEndPlugin<void> = {\n  id: VARIABLE_INSPECTOR_ID,\n  description: 'A JupyterLab extension to easy manage variables.',\n  autoStart: true,\n  requires: [ILabShell, ISettingRegistry, IStateDB],\n  activate: async (\n    app: JupyterFrontEnd,\n    labShell: ILabShell,\n    settingregistry: ISettingRegistry | null,\n    stateDB: IStateDB\n  ) => {\n    const notebookWatcher = new NotebookWatcher(app.shell);\n    const widget = createVariableInspectorSidebar(\n      notebookWatcher,\n      app.commands,\n      labShell,\n      settingregistry,\n      stateDB\n    );\n\n    app.shell.add(widget, 'left', { rank: 1998 });\n  }\n};\n\nexport default [leftTab];\n","export const getMatrix = (\n  varName: string,\n  startRow: number,\n  endRow: number,\n  startColumn: number,\n  endColumn: number\n): string => `\nimport importlib\nfrom IPython.display import JSON\n\ndef __get_variable_shape(obj):\n    if hasattr(obj, 'shape'):\n        return \" x \".join(map(str, obj.shape))\n    if isinstance(obj, list):\n        if obj and all(isinstance(el, list) for el in obj):\n            if len(set(map(len, obj))) == 1:\n                return f\"{len(obj)} x {len(obj[0])}\"\n            else:\n                return f\"{len(obj)}\"\n        return str(len(obj))\n    return \"\"\n\ndef __format_content(item):\n    if isinstance(item, list):\n        return [__format_content(subitem) for subitem in item]\n    elif isinstance(item, dict):\n        return {k: __format_content(v) for k, v in item.items()}\n    elif isinstance(item, str):\n        return item[:50] + \"...\" if len(item) > 50 else item\n    elif isinstance(item, (int, float, bool)) or item is None:\n        return item\n    else:\n        if hasattr(item, \"name\"):\n            return getattr(item, \"name\")\n        return type(item).__name__\n\ndef __mljar_variable_inspector_get_matrix_content(\n    var_name=\"${varName}\",\n    start_row=${startRow},\n    end_row=${endRow},\n    start_column=${startColumn},\n    end_column=${endColumn}\n):\n    if var_name not in globals():\n        return JSON({\"error\": \"Variable not found.\"})\n    \n    obj = globals()[var_name]\n    module_name = type(obj).__module__\n    var_type = type(obj).__name__\n    var_shape = __get_variable_shape(obj)\n    \n    if \"numpy\" in module_name:\n        try:\n            np = importlib.import_module(\"numpy\")\n        except ImportError:\n            return JSON({\"error\": \"Numpy is not installed.\"})\n        if isinstance(obj, np.ndarray):\n            if obj.ndim > 2:\n                return JSON({\n                    \"variable\": var_name,\n                    \"variableType\": var_type,\n                    \"variableShape\": var_shape,\n                    \"error\": \"Numpy array has more than 2 dimensions.\"\n                })\n            if obj.ndim == 1:\n                actual_end_row = min(end_row, len(obj))\n                sliced = obj[start_row:actual_end_row]\n                returnedSize = [start_row, actual_end_row, 0, 1]\n            else:\n                actual_end_row = min(end_row, obj.shape[0])\n                actual_end_column = min(end_column, obj.shape[1])\n                sliced = obj[start_row:actual_end_row, start_column:actual_end_column]\n                returnedSize = [start_row, actual_end_row, start_column, actual_end_column]\n            return JSON({\n                \"variable\": var_name,\n                \"variableType\": var_type,\n                \"variableShape\": var_shape,\n                \"returnedSize\": returnedSize,\n                \"content\": __format_content(sliced.tolist())\n            })\n    \n    if \"pandas\" in module_name:\n        try:\n            pd = importlib.import_module(\"pandas\")\n        except ImportError:\n            return JSON({\"error\": \"Pandas is not installed.\"})\n        if isinstance(obj, pd.DataFrame):\n            actual_end_row = min(end_row, len(obj.index))\n            actual_end_column = min(end_column, len(obj.columns))\n            sliced = obj.iloc[start_row:actual_end_row, start_column:actual_end_column]\n            result = []\n            for col in sliced.columns:\n                col_values = [col] + sliced[col].tolist()\n                result.append(col_values)\n            returnedSize = [start_row, actual_end_row, start_column, actual_end_column]\n            return JSON({\n                \"variable\": var_name,\n                \"variableType\": var_type,\n                \"variableShape\": var_shape,\n                \"returnedSize\": returnedSize,\n                \"content\": __format_content(result)\n            })\n        elif isinstance(obj, pd.Series):\n            actual_end_row = min(end_row, len(obj))\n            sliced = obj.iloc[start_row:actual_end_row]\n            df = sliced.to_frame()\n            result = []\n            for col in df.columns:\n                col_values = [col] + df[col].tolist()\n                result.append(col_values)\n            returnedSize = [start_row, actual_end_row, 0, 1]\n            return JSON({\n                \"variable\": var_name,\n                \"variableType\": var_type,\n                \"variableShape\": var_shape,\n                \"returnedSize\": returnedSize,\n                \"content\": __format_content(result)\n            })\n    \n    if isinstance(obj, list):\n        if all(isinstance(el, list) for el in obj):\n            if len(set(map(len, obj))) == 1:\n                actual_end_row = min(end_row, len(obj))\n                actual_end_column = min(end_column, len(obj[0]))\n                sliced = [row[start_column:actual_end_column] for row in obj[start_row:actual_end_row]]\n                returnedSize = [start_row, actual_end_row, start_column, actual_end_column]\n                content = __format_content(sliced)\n            else:\n                actual_end_row = min(end_row, len(obj))\n                sliced = obj[start_row:actual_end_row]\n                returnedSize = [start_row, actual_end_row, 0, 1]\n                content = [\"list\" for _ in sliced]\n                var_shape = f\"{len(obj)}\"\n            return JSON({\n                \"variable\": var_name,\n                \"variableType\": var_type,\n                \"variableShape\": var_shape,\n                \"returnedSize\": returnedSize,\n                \"content\": content\n            })\n        else:\n            actual_end_row = min(end_row, len(obj))\n            sliced = obj[start_row:actual_end_row]\n            returnedSize = [start_row, actual_end_row, 0, 1]\n            return JSON({\n                \"variable\": var_name,\n                \"variableType\": var_type,\n                \"variableShape\": str(len(obj)),\n                \"returnedSize\": returnedSize,\n                \"content\": __format_content(sliced)\n            })\n    \n    if isinstance(obj, dict):\n        items = list(obj.items())[start_row:end_row]\n        sliced_dict = dict(items)\n        returnedSize = [start_row, end_row, 0, 1]\n        var_shape = str(len(obj))\n        return JSON({\n            \"variable\": var_name,\n            \"variableType\": var_type,\n            \"variableShape\": var_shape,\n            \"returnedSize\": returnedSize,\n            \"content\": __format_content(sliced_dict)\n        })\n    \n    return JSON({\n        \"variable\": var_name,\n        \"variableType\": var_type,\n        \"variableShape\": \"unknown\",\n        \"error\": \"Variable is not a supported array type.\",\n        \"content\": [10, 10, 10]  \n    })\n\n__mljar_variable_inspector_get_matrix_content()\n`;\n","export const variableDict = `\nimport json\nimport sys\nimport math\nfrom importlib import __import__\nfrom IPython import get_ipython\nfrom IPython.core.magics.namespace import NamespaceMagics\n\n__mljar_variable_inspector_nms = NamespaceMagics()\n__mljar_variable_inspector_Jupyter = get_ipython()\n__mljar_variable_inspector_nms.shell = __mljar_variable_inspector_Jupyter.kernel.shell\n\n__np = None\n__pd = None\n__pyspark = None\n__tf = None\n__K = None\n__torch = None\n__ipywidgets = None\n__xr = None\n\n\ndef __mljar_variable_inspector_attempt_import(module):\n    try:\n        return __import__(module)\n    except ImportError:\n        return None\n\n\ndef __mljar_variable_inspector_check_imported():\n    global __np, __pd, __pyspark, __tf, __K, __torch, __ipywidgets, __xr\n\n    __np = __mljar_variable_inspector_attempt_import('numpy')\n    __pd = __mljar_variable_inspector_attempt_import('pandas')\n    __pyspark = __mljar_variable_inspector_attempt_import('pyspark')\n    __tf = __mljar_variable_inspector_attempt_import('tensorflow')\n    __K = __mljar_variable_inspector_attempt_import('keras.backend') or __mljar_variable_inspector_attempt_import('tensorflow.keras.backend')\n    __torch = __mljar_variable_inspector_attempt_import('torch')\n    __ipywidgets = __mljar_variable_inspector_attempt_import('ipywidgets')\n    __xr = __mljar_variable_inspector_attempt_import('xarray')\n\n\ndef __mljar_variable_inspector_getshapeof(x):\n    def get_list_shape(lst):\n        if isinstance(lst, list):\n            if not lst:\n                return \"0\"\n            sub_shape = get_list_shape(lst[0])\n            return f\"{len(lst)}\" if sub_shape == \"\" else f\"{len(lst)} x {sub_shape}\"\n        else:\n            return \"\"\n\n    if __pd and isinstance(x, __pd.DataFrame):\n        return \"%d x %d\" % x.shape\n    if __pd and isinstance(x, __pd.Series):\n        return \"%d\" % x.shape\n    if __np and isinstance(x, __np.ndarray):\n        shape = \" x \".join([str(i) for i in x.shape])\n        return \"%s\" % shape\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return \"? x %d\" % len(x.columns)\n    if __tf and isinstance(x, __tf.Variable):\n        shape = \" x \".join([str(int(i)) for i in x.shape])\n        return \"%s\" % shape\n    if __tf and isinstance(x, __tf.Tensor):\n        shape = \" x \".join([str(int(i)) for i in x.shape])\n        return \"%s\" % shape\n    if __torch and isinstance(x, __torch.Tensor):\n        shape = \" x \".join([str(int(i)) for i in x.shape])\n        return \"%s\" % shape\n    if __xr and isinstance(x, __xr.DataArray):\n        shape = \" x \".join([str(int(i)) for i in x.shape])\n        return \"%s\" % shape\n    if isinstance(x, list):\n        return get_list_shape(x)\n    if isinstance(x, dict):\n        return \"%s keys\" % len(x)\n    return None\n\n\ndef __format_content(item):\n    if isinstance(item, list):\n        return __format_content(str([__format_content(subitem) for subitem in item]))\n    elif isinstance(item, dict):\n        return __format_content(str({k: __format_content(v) for k, v in item.items()}))\n    elif isinstance(item, str):\n        return item[:100] + \"...\" if len(item) > 100 else item\n    elif isinstance(item, (int, float, bool, set)) or item is None:\n        return item\n    else:\n        if hasattr(item, \"name\"):\n            return getattr(item, \"name\")\n        return type(item).__name__   \n\ndef __mljar_variable_inspector_get_simple_value(x):\n    if isinstance(x, bytes):\n        return \"\"\n    if x is None:\n        return \"None\"\n    if __np is not None and __np.isscalar(x) and not isinstance(x, bytes):\n        return str(x)\n    if isinstance(x, (int, float, complex, bool, str, set, list, dict)):\n        strValue = str(x) #__format_content(x)\n        if len(strValue) > 100:\n            return strValue[:100] + \"...\"\n        else:\n            return strValue\n    # if isinstance(x, (list, dict)):\n    #     return __format_content(x)\n\n    return \"\"\n\n\ndef __mljar_variable_inspector_size_converter(size):\n    if size == 0: \n        return '0B'\n    units = ['B', 'kB', 'MB', 'GB', 'TB']\n    index = math.floor(math.log(size, 1024))\n    divider = math.pow(1024, index)\n    converted_size = round(size / divider, 2)\n    return f\"{converted_size} {units[index]}\"\n\n\ndef __mljar_variable_inspector_dict_list():\n    __mljar_variable_inspector_check_imported()\n    def __mljar_variable_inspector_keep_cond(v):\n        try:\n            obj = eval(v)\n            if isinstance(obj, str):\n                return True\n            if __tf and isinstance(obj, __tf.Variable):\n                return True\n            if __pd and __pd is not None and (\n                isinstance(obj, __pd.core.frame.DataFrame)\n                or isinstance(obj, __pd.core.series.Series)):\n                return True\n            if __xr and __xr is not None and isinstance(obj, __xr.DataArray):\n                return True\n            if str(obj).startswith(\"<psycopg.Connection\"):\n                return True\n            if str(obj).startswith(\"<module\"):\n                return False\n            if str(obj).startswith(\"<class\"):\n                return False \n            if str(obj).startswith(\"<function\"):\n                return False \n            if  v in ['__np', '__pd', '__pyspark', '__tf', '__K', '__torch', '__ipywidgets', '__xr']:\n                return obj is not None\n            if str(obj).startswith(\"_Feature\"):\n                # removes tf/keras objects\n                return False\n            return True\n        except:\n            return False\n    values = __mljar_variable_inspector_nms.who_ls()\n    \n    vardic = []\n    for _v in values:\n        if __mljar_variable_inspector_keep_cond(_v):\n            _ev = eval(_v)\n            vardic += [{\n                'varName': _v,\n                'varType': type(_ev).__name__, \n                'varShape': str(__mljar_variable_inspector_getshapeof(_ev)) if __mljar_variable_inspector_getshapeof(_ev) else '',\n                'varDimension': __mljar_variable_inspector_getdim(_ev),\n                'varSize': __mljar_variable_inspector_size_converter(__mljar_variable_inspector_get_size_mb(_ev)),\n                'varSimpleValue': __mljar_variable_inspector_get_simple_value(_ev)\n            }]\n    # from IPython.display import JSON\n    # return JSON(vardic)\n    return json.dumps(vardic, ensure_ascii=False)\n\n\ndef __mljar_variable_inspector_get_size_mb(obj):\n    return sys.getsizeof(obj)\n\n\ndef __mljar_variable_inspector_getdim(x):\n    \"\"\"\n    return dimension for object:\n      - For Data frame -> 2\n      - For Series -> 1\n      - For NDarray -> korzysta z atrybutu ndim\n      - For pyspark DataFrame -> 2\n      - For TensorFlow, PyTorch, xarray -> shape length\n      - For list -> nesting depth\n      - For sklar type (int, float, itp.) -> 1\n      - For other objects or dict -> 0\n    \"\"\"\n    if __pd and isinstance(x, __pd.DataFrame):\n        return 2\n    if __pd and isinstance(x, __pd.Series):\n        return 1\n    if __np and isinstance(x, __np.ndarray):\n        return x.ndim\n    if __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        return 2\n    if __tf and (isinstance(x, __tf.Variable) or isinstance(x, __tf.Tensor)):\n        try:\n            return len(x.shape)\n        except Exception:\n            return 0\n    if __torch and isinstance(x, __torch.Tensor):\n        return len(x.shape)\n    if __xr and isinstance(x, __xr.DataArray):\n        return len(x.shape)\n    if isinstance(x, list):\n        def __mljar_variable_inspector_list_depth(lst):\n            if isinstance(lst, list) and lst:\n                subdepths = [__mljar_variable_inspector_list_depth(el) for el in lst if isinstance(el, list)]\n                if subdepths:\n                    return 1 + max(subdepths)\n                else:\n                    return 1\n            else:\n                return 0\n        return __mljar_variable_inspector_list_depth(x)\n    if isinstance(x, (int, float, complex, bool, str)):\n        return 1\n    if isinstance(x, dict):\n        return 0\n    return 0\n\n\ndef __mljar_variable_inspector_getmatrixcontent(x, max_rows=10000):\n    # to do: add something to handle this in the future\n    threshold = max_rows\n\n    if __pd and __pyspark and isinstance(x, __pyspark.sql.DataFrame):\n        df = x.limit(threshold).toPandas()\n        return __mljar_variable_inspector_getmatrixcontent(df.copy())\n    elif __np and __pd and type(x).__name__ == \"DataFrame\":\n        if threshold is not None:\n            x = x.head(threshold)\n        x.columns = x.columns.map(str)\n        return x.to_json(orient=\"table\", default_handler= __mljar_variable_inspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == \"Series\": \n        if threshold is not None:\n            x = x.head(threshold)\n        return x.to_json(orient=\"table\", default_handler= __mljar_variable_inspector_default, force_ascii=False)\n    elif __np and __pd and type(x).__name__ == \"ndarray\":\n        df = __pd.DataFrame(x)\n        return __mljar_variable_inspector_getmatrixcontent(df)\n    elif __tf and (isinstance(x, __tf.Variable) or isinstance(x, __tf.Tensor)):\n        df = __K.get_value(x)\n        return __mljar_variable_inspector_getmatrixcontent(df)\n    elif __torch and isinstance(x, __torch.Tensor):\n        df = x.cpu().numpy()\n        return __mljar_variable_inspector_getmatrixcontent(df)\n    elif __xr and isinstance(x, __xr.DataArray):\n        df = x.to_numpy()\n        return __mljar_variable_inspector_getmatrixcontent(df)\n    elif isinstance(x, list):\n        s = __pd.Series(x)\n        return __mljar_variable_inspector_getmatrixcontent(s)\n\n\ndef __mljar_variable_inspector_displaywidget(widget):\n    display(widget)\n\n\ndef __mljar_variable_inspector_default(o):\n    if isinstance(o, __np.number): return int(o)  \n    raise TypeError\n\n\ndef __mljar_variable_inspector_deletevariable(x):\n    exec(\"del %s\" % x, globals())\n\n__mljar_variable_inspector_dict_list()\n`;\n","export const allowedTypes = ['ndarray', 'DataFrame', 'list', 'Series', 'tuple'];\n","import { KernelMessage } from '@jupyterlab/services';\nimport { NotebookPanel } from '@jupyterlab/notebook';\nimport { getMatrix } from '../python_code/getMatrix';\n\nexport const executeMatrixContent = async (\n  varName: string,\n  varStartColumn: number,\n  varEndColumn: number,\n  varStartRow: number,\n  varEndRow: number,\n  notebookPanel: NotebookPanel\n): Promise<any> => {\n  if (!notebookPanel) {\n    throw new Error('Kernel not available.');\n  }\n  const code = getMatrix(\n    varName,\n    varStartRow,\n    varEndRow,\n    varStartColumn,\n    varEndColumn\n  );\n\n  return new Promise((resolve, reject) => {\n    let outputData = '';\n    let resultResolved = false;\n    const future =\n      notebookPanel.sessionContext?.session?.kernel?.requestExecute({\n        code,\n        store_history: false\n      });\n\n    if (!future) {\n      return reject(new Error('No future returned from kernel execution.'));\n    }\n\n    future.onIOPub = (msg: KernelMessage.IIOPubMessage) => {\n      const msgType = msg.header.msg_type;\n\n      if (msgType === 'execute_result' || msgType === 'display_data') {\n        const content = msg.content as any;\n        if (content.data && content.data['application/json']) {\n          resultResolved = true;\n          resolve(content.data['application/json']);\n        } else if (content.data && content.data['text/plain']) {\n          outputData += content.data['text/plain'];\n        }\n      } else if (msgType === 'stream') {\n        /* empty */\n      } else if (msgType === 'error') {\n        console.error('Python error:', msg.content);\n        reject(new Error('Error during Python execution.'));\n      }\n    };\n\n    future.done.then(() => {\n      if (!resultResolved) {\n        try {\n          const cleanedData = outputData.trim();\n          const parsed = JSON.parse(cleanedData);\n          resolve(parsed);\n        } catch (err) {\n          reject(new Error('Failed to parse output from Python.'));\n        }\n      }\n    });\n  });\n};\n","import { Signal } from '@lumino/signaling';\n\nexport class KernelOperationNotifier {\n  private _inProgressSidebar = false;\n  private _inProgressPanel = false;\n\n  readonly sidebarOperationChanged = new Signal<this, boolean>(this);\n  readonly panelOperationChanged = new Signal<this, boolean>(this);\n\n  set inProgressSidebar(value: boolean) {\n    if (this._inProgressSidebar !== value) {\n      this._inProgressSidebar = value;\n      this.sidebarOperationChanged.emit(value);\n    }\n  }\n  get inProgressSidebar(): boolean {\n    return this._inProgressSidebar;\n  }\n\n  set inProgressPanel(value: boolean) {\n    if (this._inProgressPanel !== value) {\n      this._inProgressPanel = value;\n      this.panelOperationChanged.emit(value);\n    }\n  }\n  get inProgressPanel(): boolean {\n    return this._inProgressPanel;\n  }\n}\n\nexport const kernelOperationNotifier = new KernelOperationNotifier();\n\nexport async function withIgnoredSidebarKernelUpdates<T>(\n  fn: () => Promise<T>\n): Promise<T> {\n  kernelOperationNotifier.inProgressSidebar = true;\n  try {\n    return await fn();\n  } finally {\n    kernelOperationNotifier.inProgressSidebar = false;\n  }\n}\n\nexport async function withIgnoredPanelKernelUpdates<T>(\n  fn: () => Promise<T>\n): Promise<T> {\n  kernelOperationNotifier.inProgressPanel = true;\n  try {\n    return await fn();\n  } finally {\n    kernelOperationNotifier.inProgressPanel = false;\n  }\n}\n","import { allowedTypes } from './allowedTypes';\n\nexport function transpose<T>(matrix: T[][]): T[][] {\n  return matrix[0].map((_, colIndex) =>\n    matrix.map((row: T[]) => row[colIndex])\n  );\n}\n\ninterface TransformedMatrix {\n  data: any[][];\n  fixedRowCount: number;\n  fixedColumnCount: number;\n}\n\ninterface TransformedMatrix {\n  data: any[][];\n  fixedRowCount: number;\n  fixedColumnCount: number;\n}\n\nexport function transformMatrixData(\n  matrixData: any[],\n  variableType: string,\n  currentRow: number,\n  currentColumn: number\n): TransformedMatrix {\n  let data2D: any[][] = [];\n  if (matrixData.length > 0 && !Array.isArray(matrixData[0])) {\n    data2D = (matrixData as any[]).map(item => [item]);\n  } else {\n    data2D = matrixData as any[][];\n  }\n\n  let data: any[][] = data2D;\n  let fixedRowCount = 0;\n  let fixedColumnCount = 0;\n\n  if (data2D.length > 0 && allowedTypes.includes(variableType)) {\n    const globalRowStart = currentRow;\n    const headerRow = ['index'];\n    const headerLength =\n      variableType === 'DataFrame' ? data2D[0].length - 1 : data2D[0].length;\n    for (let j = 0; j < headerLength; j++) {\n      headerRow.push((globalRowStart + j).toString());\n    }\n\n    let newData = [headerRow];\n    for (let i = 0; i < data2D.length; i++) {\n      if (variableType === 'DataFrame') {\n        newData.push([...data2D[i]]);\n      } else {\n        const globalIndex = currentRow + i;\n        newData.push([globalIndex, ...data2D[i]]);\n      }\n    }\n\n    if (variableType === 'DataFrame' || variableType === 'Series') {\n      newData = transpose(newData);\n    }\n\n    data2D = transpose(data2D);\n    data = newData;\n    fixedRowCount = 1;\n    fixedColumnCount = 1;\n  }\n\n  return { data, fixedRowCount, fixedColumnCount };\n}\n","import { JupyterFrontEnd } from '@jupyterlab/application';\nimport { Notebook } from '@jupyterlab/notebook';\nimport { Widget } from '@lumino/widgets';\nimport { Signal } from '@lumino/signaling';\nimport { DocumentWidget } from '@jupyterlab/docregistry';\nimport { NotebookPanel } from '@jupyterlab/notebook';\n\nfunction getNotebook(widget: Widget | null): Notebook | null {\n  if (!(widget instanceof DocumentWidget)) {\n    return null;\n  }\n\n  const { content } = widget;\n  if (!(content instanceof Notebook)) {\n    return null;\n  }\n\n  return content;\n}\n\nexport class NotebookWatcher {\n  constructor(shell: JupyterFrontEnd.IShell) {\n    this._shell = shell;\n    this._shell.currentChanged?.connect((sender, args) => {\n      this._mainAreaWidget = args.newValue;\n      this._notebookPanel = this.notebookPanel();\n      this._notebookPanelChanged.emit(this._notebookPanel);\n      this._attachKernelChangeHandler();\n    });\n  }\n\n  get notebookPanelChanged(): Signal<this, NotebookPanel | null> {\n    return this._notebookPanelChanged;\n  }\n\n  get kernelInfo(): KernelInfo | null {\n    return this._kernelInfo;\n  }\n\n  get kernelChanged(): Signal<this, KernelInfo | null> {\n    return this._kernelChanged;\n  }\n\n  notebookPanel(): NotebookPanel | null {\n    const notebook = getNotebook(this._mainAreaWidget);\n    if (!notebook) {\n      return null;\n    }\n    return notebook.parent instanceof NotebookPanel ? notebook.parent : null;\n  }\n\n  private _attachKernelChangeHandler(): void {\n    if (this._notebookPanel) {\n      const session = this._notebookPanel.sessionContext.session;\n\n      if (session) {\n        session.kernelChanged.connect(this._onKernelChanged, this);\n        this._updateKernelInfo(session.kernel);\n      } else {\n        setTimeout(() => {\n          const delayedSession = this._notebookPanel?.sessionContext.session;\n          if (delayedSession) {\n            delayedSession.kernelChanged.connect(this._onKernelChanged, this);\n            this._updateKernelInfo(delayedSession.kernel);\n          } else {\n            console.warn('Session not initialized after delay');\n          }\n        }, 2000);\n      }\n    } else {\n      console.warn('Session not initalizated');\n    }\n  }\n\n  private _onKernelChanged(\n    sender: any,\n    args: { name: string; oldValue: any; newValue: any }\n  ): void {\n    if (args.newValue) {\n      this._updateKernelInfo(args.newValue);\n    } else {\n      this._kernelInfo = null;\n      this._kernelChanged.emit(null);\n    }\n  }\n\n  private _updateKernelInfo(kernel: any): void {\n    this._kernelInfo = {\n      name: kernel.name,\n      id: kernel.id\n    };\n    this._kernelChanged.emit(this._kernelInfo);\n  }\n\n  protected _kernelInfo: KernelInfo | null = null;\n  protected _kernelChanged = new Signal<this, KernelInfo | null>(this);\n  protected _shell: JupyterFrontEnd.IShell;\n  protected _mainAreaWidget: Widget | null = null;\n  protected _notebookPanel: NotebookPanel | null = null;\n  protected _notebookPanelChanged = new Signal<this, NotebookPanel | null>(\n    this\n  );\n}\n\nexport type KernelInfo = {\n  name: string;\n  id: string;\n};\n"],"names":[],"sourceRoot":""}